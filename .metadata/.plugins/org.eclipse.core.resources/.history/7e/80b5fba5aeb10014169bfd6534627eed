package clases.iu.compra.cotizacion;

import java.io.Serializable;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.Conversation;
import javax.enterprise.context.ConversationScoped;
import javax.enterprise.inject.Default;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import clases.business.metales.vo.compra.ArticuloCompraMetal;
import clases.cotizacion.dto.ArticuloCotizar;
import clases.vo.cliente.Cliente;
import ejb.bussines.CompraEJB;
import ejb.bussines.exception.RDNException;

@Named
@ConversationScoped
@Default
public class CompraView implements Serializable{
		
	
	 /**
	 * 
	 */
	private static final long serialVersionUID = 2732432874569849246L;
	
	private final Logger log = LogManager.getLogger(CompraView.class);
	
	private int numeroArticolo=0;
	
	@Inject
	 private Conversation conversation;
	
	private List<ArticuloCotizar> articulos;
	private Cliente cliente;
	
	@EJB
	private CompraEJB ejbCompra;
	
	
	
	public CompraView() {
		
	}
	
	public String getTotalValuacionArticulos(){
		double total=0.0F;
		DecimalFormat df2 = new DecimalFormat( "#,###,###,##0.00" );
		for(ArticuloCotizar a : this.articulos){
			total+=a.getCotizacion();
		}
		
		return df2.format(total);
		
	}
	
	
	@PostConstruct
	private void init(){
		
		this.articulos= new ArrayList<ArticuloCotizar>();
		this.cliente= new Cliente();
	}
	
	public boolean mostrarTabla(){
		
		if(this.getArticulos().size()>0){
			
			return true;
		}
		return false;
	}
	
	

	public String getTipoCliente(){
		return this.cliente.getIdPersona()==0?"NUEVO":"CONOCIDO";
	}
	
	public String eventConfirmarOperacion(){
	
		
		log.debug("Inicia el guardado de los datos");
		
		try{
			
			// se copia la lista
			List<ArticuloCompraMetal> articulosCompra=new ArrayList<ArticuloCompraMetal>();
			
			for(ArticuloCotizar a: this.articulos){
				ArticuloCompraMetal an= new ArticuloCompraMetal();
				an.setDescripcion(a.getDescripcion());
				an.setPesoBruto(a.getPesoBruto());
				an.setPesoNeto(a.getPesoNeto());
				an.setPrecioMetal(a.getPrecioMetal());
				an.setPureza(a.getPureza());
				articulosCompra.add(an);
			}
			
			log.debug("Lista de articulos a mandar: "+articulosCompra.size());
			
			this.ejbCompra.registrarCompra(this.cliente,articulosCompra);
			
			log.debug("OK, operacion realizada con Ã©xito");
			
			this.endConversation();			
			return this.navegacionCotizacion();
			
			
			
		}catch(RDNException rdnE){
			
			log.error("Error RDN en alta  cliente",rdnE);
			FacesContext context= FacesContext.getCurrentInstance();
			context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN ,"Cuidado", rdnE.getMessage() ));
			return null;
		}catch(Exception e){
			log.error("Error EXP en alta cliente",e);
			FacesContext context= FacesContext.getCurrentInstance();
			context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "No se pudo dar de alta al cliente"+e.getMessage()));
			return null;
		}
	
	}
	

	public String navegacionCliente(){
		log.debug("navega cliente");
		return "busquedaCliente?faces-redirect=true";
	}
	
	public String navegacionCotizacion(){
		log.debug("regresando a cotizacion");
		return "cotizacion?faces-redirect=true";
	}
	
	public String navegarResumenCompra() {		
		return "resumen?faces-redirect=true";
	}
	
	public void initConversation(){
	    if (!FacesContext.getCurrentInstance().isPostback() 
	      && conversation.isTransient()) {
	    
	      conversation.begin();
	    }
	  }
	
	 public String endConversation(){
		    if(!conversation.isTransient()){
		      conversation.end();
		    }
		    return "cotizacion?faces-redirect=true";
		  }

	public Conversation getConversation() {
		return conversation;
	}

	public void setConversation(Conversation conversation) {
		this.conversation = conversation;
	}

	public List<ArticuloCotizar> getArticulos() {
		return articulos;
	}

	public void setArticulos(List<ArticuloCotizar> articulos) {
		this.articulos = articulos;
	}

	public Cliente getCliente() {
		return cliente;
	}

	public void setCliente(Cliente cliente) {
		this.cliente = cliente;
	}
	
	public int getNumeroArtculo(){
		return ++this.numeroArticolo;
	}





	 
}
